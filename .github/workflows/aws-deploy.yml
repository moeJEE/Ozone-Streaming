name: AWS Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  AWS_REGION: 'us-west-2'
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

jobs:
  build-and-push:
    name: 'Build and Push Images'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push Kafka Producer image
      run: |
        docker build -t kafka-producer -f kafka_producers/Dockerfile kafka_producers/
        docker tag kafka-producer:latest $ECR_REGISTRY/data-streaming-pipeline-kafka-producer:latest
        docker push $ECR_REGISTRY/data-streaming-pipeline-kafka-producer:latest
        
    - name: Build, tag, and push Spark Jobs image
      run: |
        docker build -t spark-jobs -f docker/spark/Dockerfile docker/spark/
        docker tag spark-jobs:latest $ECR_REGISTRY/data-streaming-pipeline-spark-jobs:latest
        docker push $ECR_REGISTRY/data-streaming-pipeline-spark-jobs:latest
        
    - name: Build, tag, and push Airflow image
      run: |
        docker build -t airflow -f docker/airflow/Dockerfile docker/airflow/
        docker tag airflow:latest $ECR_REGISTRY/data-streaming-pipeline-airflow:latest
        docker push $ECR_REGISTRY/data-streaming-pipeline-airflow:latest
        
    - name: Build, tag, and push Frontend image
      run: |
        docker build -t frontend -f frontend/Dockerfile frontend/
        docker tag frontend:latest $ECR_REGISTRY/data-streaming-pipeline-frontend:latest
        docker push $ECR_REGISTRY/data-streaming-pipeline-frontend:latest

  deploy-infrastructure:
    name: 'Deploy Infrastructure'
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy with Terraform
      run: |
        cd terraform
        terraform init
        terraform plan -var="environment=${{ github.event.inputs.environment || 'development' }}"
        terraform apply -auto-approve -var="environment=${{ github.event.inputs.environment || 'development' }}"

  deploy-applications:
    name: 'Deploy Applications'
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to ECS/Fargate
      run: |
        # Update ECS service with new image
        aws ecs update-service \
          --cluster data-streaming-pipeline-cluster \
          --service data-streaming-pipeline-service \
          --force-new-deployment
        
    - name: Run Database Migrations
      run: |
        # Run database migrations
        python aws/s3-backup-script.py
        
    - name: Setup CloudWatch Monitoring
      run: |
        # Setup CloudWatch monitoring
        python aws/cloudwatch-metrics.py

  health-check:
    name: 'Health Check'
    runs-on: ubuntu-latest
    needs: deploy-applications
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to be ready..."
        sleep 60
        
    - name: Run health checks
      run: |
        # Check if services are responding
        # This would include checking endpoints, database connectivity, etc.
        echo "Running health checks..."
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi
